{"ast":null,"code":"var _jsxFileName = \"/Users/learn/Desktop/tic-tac-toe/src/components/Board.js\";\nimport React, { Component } from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  constructor(props) {\n    super(props); //define the spaces array that the user start with\n\n    this.handleLocation = index => {\n      let {\n        spaces,\n        answer,\n        userStatus,\n        counter\n      } = this.state; //update the value of square that you click on match the value of 'answer' array value with the same index.\n\n      spaces[index] = answer[index];\n      this.setState({\n        spaces: spaces,\n        answer: answer,\n        counter: --counter\n      });\n\n      if (spaces[index] === \"ğŸ’‰\" || counter === 0) {\n        this.setState({\n          userStatus: \"Your cow got METH! ğŸ¤¢\"\n        });\n      } else if (spaces[index] === \"ğŸ’°\") {\n        this.setState({\n          userStatus: \"Your cow got MONEY ğŸ¤‘\"\n        });\n      }\n    };\n\n    this.resetGame = () => {\n      let {\n        spaces,\n        answer,\n        counter,\n        userStatus\n      } = this.state;\n      spaces = spaces.map(value => value = \"\");\n      answer = answer.map(value => value = \"\");\n      this.setState({\n        spaces: spaces,\n        answer: answer,\n        counter: 5,\n        userStatus: \"\"\n      });\n    };\n\n    this.randomize = () => {\n      let {\n        spaces,\n        answer\n      } = this.state;\n      let randomTreasure = Math.floor(Math.random() * spaces.length);\n      let randomBomb = Math.floor(Math.random() * spaces.length);\n\n      while (randomTreasure === randomBomb) {\n        randomTreasure = Math.floor(Math.random() * spaces.length);\n      }\n\n      answer[randomBomb] = \"ğŸ’‰\";\n      answer[randomTreasure] = \"ğŸ’°\"; //Updating the displayed state as user plays the game\n\n      this.setState({\n        answer: answer\n      });\n      console.log(answer);\n    };\n\n    this.state = {\n      spaces: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      answer: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      userStatus: \"\",\n      counter: 5\n    };\n  }\n\n  render() {\n    let {\n      spaces,\n      answer,\n      counter,\n      userStatus\n    } = this.state;\n    let square = spaces.map((value, index) => {\n      return React.createElement(Square, {\n        handleLocation: this.handleLocation,\n        randomize: this.randomize,\n        index: index,\n        value: value,\n        userStatus: userStatus,\n        counter: counter,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      });\n    });\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \" Counter:\", this.state.counter), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, square, React.createElement(\"button\", {\n      onClick: this.randomize,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \" Start Game\"), React.createElement(\"button\", {\n      onClick: this.resetGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \" Reset Game\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.userStatus)));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/learn/Desktop/tic-tac-toe/src/components/Board.js"],"names":["React","Component","Square","Board","constructor","props","handleLocation","index","spaces","answer","userStatus","counter","state","setState","resetGame","map","value","randomize","randomTreasure","Math","floor","random","length","randomBomb","console","log","render","square"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Square from './Square'\nclass Board extends Component {\n    constructor(props) {\n        super(props)\n\n        //define the spaces array that the user start with\n          this.state = {\n              spaces: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n              answer:[\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n              userStatus: \"\",\n              counter: 5\n          }\n    }\n    handleLocation = (index) => {\n         let {spaces, answer, userStatus, counter} = this.state\n         //update the value of square that you click on match the value of 'answer' array value with the same index.\n         spaces[index] = answer[index]\n         this.setState({\n             spaces: spaces,\n             answer: answer,\n             counter: --counter\n         })\n         if(spaces[index] === \"ğŸ’‰\" || counter === 0){\n             this.setState({userStatus: \"Your cow got METH! ğŸ¤¢\"})\n\n         } else if(spaces[index] === \"ğŸ’°\"){\n             this.setState({userStatus: \"Your cow got MONEY ğŸ¤‘\"})\n         }\n\n    }\n\n//Resetting the Game\n    resetGame = () => {\n        let {spaces, answer, counter, userStatus} = this.state\n        spaces = spaces.map(value => value = \"\")\n        answer = answer.map(value => value = \"\")\n        this.setState({\n            spaces: spaces,\n            answer: answer,\n            counter: 5,\n            userStatus: \"\"\n        })\n    }\n\n\n//Decide the random bomb and treasure location once the page is loaded automatically\n    randomize = () => {\n        let { spaces,answer } = this.state\n        let randomTreasure = Math.floor(Math.random() * spaces.length)\n        let randomBomb = Math.floor(Math.random() * spaces.length)\n        while(randomTreasure === randomBomb){\n                randomTreasure = Math.floor(Math.random() * spaces.length)\n            }\n        answer[randomBomb] = \"ğŸ’‰\"\n        answer[randomTreasure] = \"ğŸ’°\"\n\n        //Updating the displayed state as user plays the game\n        this.setState({answer:answer})\n        console.log(answer)\n  }\n\n  render() {\n    let { spaces,answer, counter, userStatus } = this.state\n    let square = spaces.map((value, index) => {\n        return (\n        <Square\n        handleLocation = {this.handleLocation}\n        randomize = {this.randomize}\n        index = { index }\n        value = { value }\n        userStatus = {userStatus}\n        counter = { counter }\n        /> )})\n\n\n\n    return (\n    <>\n    <div> Counter:{this.state.counter}</div>\n    <br/>\n     <div className = \"board\">\n        {square}\n        <button onClick = {this.randomize}> Start Game</button>\n        <button onClick = {this.resetGame}> Reset Game</button>\n        <br/>\n        <p>{this.state.userStatus}</p>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default Board\n"]},"metadata":{},"sourceType":"module"}